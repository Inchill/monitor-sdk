!(function (t, e) {
  'object' == typeof exports && 'undefined' != typeof module
    ? (module.exports = e())
    : 'function' == typeof define && define.amd
    ? define(e)
    : ((t =
        'undefined' != typeof globalThis ? globalThis : t || self).WebMonitor =
        e())
})(this, function () {
  'use strict'
  function t(t, e) {
    for (var n = 0; n < e.length; n++) {
      var o = e[n]
      ;(o.enumerable = o.enumerable || !1),
        (o.configurable = !0),
        'value' in o && (o.writable = !0),
        Object.defineProperty(t, o.key, o)
    }
  }
  function e(t, e) {
    var o =
      ('undefined' != typeof Symbol && t[Symbol.iterator]) || t['@@iterator']
    if (!o) {
      if (
        Array.isArray(t) ||
        (o = (function (t, e) {
          if (!t) {
            return
          }
          if ('string' == typeof t) {
            return n(t, e)
          }
          var o = Object.prototype.toString.call(t).slice(8, -1)
          'Object' === o && t.constructor && (o = t.constructor.name)
          if ('Map' === o || 'Set' === o) {
            return Array.from(t)
          }
          if (
            'Arguments' === o ||
            /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)
          ) {
            return n(t, e)
          }
        })(t)) ||
        (e && t && 'number' == typeof t.length)
      ) {
        o && (t = o)
        var r = 0,
          i = function () {}
        return {
          s: i,
          n: function () {
            return r >= t.length
              ? {
                  done: !0
                }
              : {
                  done: !1,
                  value: t[r++]
                }
          },
          e: function (t) {
            throw t
          },
          f: i
        }
      }
      throw new TypeError(
        'Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
      )
    }
    var a,
      f = !0,
      u = !1
    return {
      s: function () {
        o = o.call(t)
      },
      n: function () {
        var t = o.next()
        return (f = t.done), t
      },
      e: function (t) {
        ;(u = !0), (a = t)
      },
      f: function () {
        try {
          f || null == o.return || o.return()
        } finally {
          if (u) {
            throw a
          }
        }
      }
    }
  }
  function n(t, e) {
    ;(null == e || e > t.length) && (e = t.length)
    for (var n = 0, o = new Array(e); n < e; n++) {
      o[n] = t[n]
    }
    return o
  }
  return (function () {
    function n(t) {
      !(function (t, e) {
        if (!(t instanceof e)) {
          throw new TypeError('Cannot call a class as a function')
        }
      })(this, n),
        (this.config = Object.assign(this.normalizeConfig(), t)),
        (this.domConfig = this.normalizeDomConfig()),
        (window.$monitorConfig = this.config)
    }
    var o, r, i
    return (
      (o = n),
      (r = [
        {
          key: 'normalizeConfig',
          value: function () {
            return {
              domMonitor: !1
            }
          }
        },
        {
          key: 'normalizeDomConfig',
          value: function () {
            return {
              visibility: !0,
              root: null,
              threshold: 0.2,
              event: !0,
              eventListeners: ['click']
            }
          }
        },
        {
          key: 'reportEvent',
          value: function (t, e, n) {
            var o = this.config.sendUrl,
              r = {
                key: t,
                value: e
              },
              i = new Blob([JSON.stringify(r)], {
                type: n || 'application/x-www-form-urlencoded'
              })
            navigator.sendBeacon(o, i)
          }
        },
        {
          key: 'createDOMMonitor',
          value: function (t) {
            !1 !== this.config.domMonitor &&
              ((this.domConfig = Object.assign(this.domConfig, t)),
              this.eventMonitor(),
              this.visibilityMonitor())
          }
        },
        {
          key: 'eventMonitor',
          value: function () {
            var t = this
            !1 !== this.domConfig.event &&
              this.domConfig.eventListeners.forEach(function (e) {
                window.document.body.addEventListener(
                  e,
                  function (n) {
                    var o = n.target.getAttribute('data-click')
                    t.reportEvent(e, o)
                  },
                  {
                    capture: !0
                  }
                )
              })
          }
        },
        {
          key: 'visibilityMonitor',
          value: function () {
            var t = this,
              e = this.domConfig,
              n = e.root,
              o = e.threshold,
              r = new IntersectionObserver(
                function (e) {
                  e.forEach(function (e) {
                    var n = e.intersectionRatio,
                      r = e.target
                    r.hasAttribute('data-expose') &&
                      n >= o &&
                      t.reportEvent('expose', r.getAttribute('data-expose'))
                  })
                },
                {
                  root: n,
                  threshold: o
                }
              )
            this.traverseNode(n, r)
          }
        },
        {
          key: 'traverseNode',
          value: function (t, n) {
            if (t) {
              var o,
                r = e(t.children)
              try {
                for (r.s(); !(o = r.n()).done; ) {
                  var i = o.value
                  i.hasAttribute('data-expose') && n.observe(i),
                    i.children.length && this.traverseNode(i, n)
                }
              } catch (t) {
                r.e(t)
              } finally {
                r.f()
              }
            }
          }
        }
      ]) && t(o.prototype, r),
      i && t(o, i),
      Object.defineProperty(o, 'prototype', {
        writable: !1
      }),
      n
    )
  })()
})
